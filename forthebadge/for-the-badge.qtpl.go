// Code generated by qtc from "for-the-badge.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line forthebadge/for-the-badge.qtpl:1
package forthebadge

//line forthebadge/for-the-badge.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line forthebadge/for-the-badge.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line forthebadge/for-the-badge.qtpl:1
func StreamForTheBadge(qw422016 *qt422016.Writer, label string, message string, hasLabel bool, svgWidth float64, labelX float64, labelTextLength float64, messageX float64, messageTextLength float64, labelRectWidth float64, messageRectX float64, messageRectWidth float64, color string) {
//line forthebadge/for-the-badge.qtpl:1
	qw422016.N().S(`
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="`)
//line forthebadge/for-the-badge.qtpl:2
	qw422016.N().F(svgWidth)
//line forthebadge/for-the-badge.qtpl:2
	qw422016.N().S(`" height="28" role="img"
    aria-label="`)
//line forthebadge/for-the-badge.qtpl:3
	qw422016.E().S(label)
//line forthebadge/for-the-badge.qtpl:3
	qw422016.N().S(`: `)
//line forthebadge/for-the-badge.qtpl:3
	qw422016.E().S(message)
//line forthebadge/for-the-badge.qtpl:3
	qw422016.N().S(`">
    <title>`)
//line forthebadge/for-the-badge.qtpl:4
	qw422016.E().S(label)
//line forthebadge/for-the-badge.qtpl:4
	qw422016.N().S(`: `)
//line forthebadge/for-the-badge.qtpl:4
	qw422016.E().S(message)
//line forthebadge/for-the-badge.qtpl:4
	qw422016.N().S(`</title>
    <g shape-rendering="crispEdges">
        `)
//line forthebadge/for-the-badge.qtpl:6
	if hasLabel {
//line forthebadge/for-the-badge.qtpl:6
		qw422016.N().S(`
        <rect width="`)
//line forthebadge/for-the-badge.qtpl:7
		qw422016.N().F(labelRectWidth)
//line forthebadge/for-the-badge.qtpl:7
		qw422016.N().S(`" height="28" fill="#555" />
        <rect x="`)
//line forthebadge/for-the-badge.qtpl:8
		qw422016.N().F(messageRectX)
//line forthebadge/for-the-badge.qtpl:8
		qw422016.N().S(`" width="`)
//line forthebadge/for-the-badge.qtpl:8
		qw422016.N().F(messageRectWidth)
//line forthebadge/for-the-badge.qtpl:8
		qw422016.N().S(`" height="28" fill="#`)
//line forthebadge/for-the-badge.qtpl:8
		qw422016.E().S(color)
//line forthebadge/for-the-badge.qtpl:8
		qw422016.N().S(`" />
        `)
//line forthebadge/for-the-badge.qtpl:9
	} else {
//line forthebadge/for-the-badge.qtpl:9
		qw422016.N().S(`
        <rect width="`)
//line forthebadge/for-the-badge.qtpl:10
		qw422016.N().F(messageRectWidth)
//line forthebadge/for-the-badge.qtpl:10
		qw422016.N().S(`" height="28" fill="#`)
//line forthebadge/for-the-badge.qtpl:10
		qw422016.E().S(color)
//line forthebadge/for-the-badge.qtpl:10
		qw422016.N().S(`" />
        `)
//line forthebadge/for-the-badge.qtpl:11
	}
//line forthebadge/for-the-badge.qtpl:11
	qw422016.N().S(`
    </g>
    <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif"
        text-rendering="geometricPrecision" font-size="100">
        `)
//line forthebadge/for-the-badge.qtpl:15
	if hasLabel {
//line forthebadge/for-the-badge.qtpl:15
		qw422016.N().S(`
        <text transform="scale(.1)" x="`)
//line forthebadge/for-the-badge.qtpl:16
		qw422016.N().F(labelX)
//line forthebadge/for-the-badge.qtpl:16
		qw422016.N().S(`" y="175" textLength="`)
//line forthebadge/for-the-badge.qtpl:16
		qw422016.N().F(labelTextLength)
//line forthebadge/for-the-badge.qtpl:16
		qw422016.N().S(`" fill="#fff">`)
//line forthebadge/for-the-badge.qtpl:16
		qw422016.E().S(label)
//line forthebadge/for-the-badge.qtpl:16
		qw422016.N().S(`</text>
        `)
//line forthebadge/for-the-badge.qtpl:17
	}
//line forthebadge/for-the-badge.qtpl:17
	qw422016.N().S(`
        <text transform="scale(.1)" x="`)
//line forthebadge/for-the-badge.qtpl:18
	qw422016.N().F(messageX)
//line forthebadge/for-the-badge.qtpl:18
	qw422016.N().S(`" y="175" textLength="`)
//line forthebadge/for-the-badge.qtpl:18
	qw422016.N().F(messageTextLength)
//line forthebadge/for-the-badge.qtpl:18
	qw422016.N().S(`" fill="#333" font-weight="bold">`)
//line forthebadge/for-the-badge.qtpl:18
	qw422016.E().S(message)
//line forthebadge/for-the-badge.qtpl:18
	qw422016.N().S(`</text>
    </g>
</svg>
`)
//line forthebadge/for-the-badge.qtpl:21
}

//line forthebadge/for-the-badge.qtpl:21
func WriteForTheBadge(qq422016 qtio422016.Writer, label string, message string, hasLabel bool, svgWidth float64, labelX float64, labelTextLength float64, messageX float64, messageTextLength float64, labelRectWidth float64, messageRectX float64, messageRectWidth float64, color string) {
//line forthebadge/for-the-badge.qtpl:21
	qw422016 := qt422016.AcquireWriter(qq422016)
//line forthebadge/for-the-badge.qtpl:21
	StreamForTheBadge(qw422016, label, message, hasLabel, svgWidth, labelX, labelTextLength, messageX, messageTextLength, labelRectWidth, messageRectX, messageRectWidth, color)
//line forthebadge/for-the-badge.qtpl:21
	qt422016.ReleaseWriter(qw422016)
//line forthebadge/for-the-badge.qtpl:21
}

//line forthebadge/for-the-badge.qtpl:21
func ForTheBadge(label string, message string, hasLabel bool, svgWidth float64, labelX float64, labelTextLength float64, messageX float64, messageTextLength float64, labelRectWidth float64, messageRectX float64, messageRectWidth float64, color string) string {
//line forthebadge/for-the-badge.qtpl:21
	qb422016 := qt422016.AcquireByteBuffer()
//line forthebadge/for-the-badge.qtpl:21
	WriteForTheBadge(qb422016, label, message, hasLabel, svgWidth, labelX, labelTextLength, messageX, messageTextLength, labelRectWidth, messageRectX, messageRectWidth, color)
//line forthebadge/for-the-badge.qtpl:21
	qs422016 := string(qb422016.B)
//line forthebadge/for-the-badge.qtpl:21
	qt422016.ReleaseByteBuffer(qb422016)
//line forthebadge/for-the-badge.qtpl:21
	return qs422016
//line forthebadge/for-the-badge.qtpl:21
}

//line forthebadge/for-the-badge.qtpl:24
func StreamForTheBadgeMin(qw422016 *qt422016.Writer, label string, message string, hasLabel bool, svgWidth float64, labelX float64, labelTextLength float64, messageX float64, messageTextLength float64, labelRectWidth float64, messageRectX float64, messageRectWidth float64, color string) {
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="`)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().F(svgWidth)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`" height="28" role="img" aria-label="`)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.E().S(label)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`: `)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.E().S(message)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`"><title>`)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.E().S(label)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`: `)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.E().S(message)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`</title><g shape-rendering="crispEdges">`)
//line forthebadge/for-the-badge.qtpl:24
	if hasLabel {
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`<rect width="`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().F(labelRectWidth)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" height="28" fill="#555" /><rect x="`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().F(messageRectX)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" width="`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().F(messageRectWidth)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" height="28" fill="#`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.E().S(color)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" />`)
//line forthebadge/for-the-badge.qtpl:24
	} else {
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`<rect width="`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().F(messageRectWidth)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" height="28" fill="#`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.E().S(color)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" />`)
//line forthebadge/for-the-badge.qtpl:24
	}
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`</g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="100">`)
//line forthebadge/for-the-badge.qtpl:24
	if hasLabel {
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`<text transform="scale(.1)" x="`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().F(labelX)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" y="175" textLength="`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().F(labelTextLength)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`" fill="#fff">`)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.E().S(label)
//line forthebadge/for-the-badge.qtpl:24
		qw422016.N().S(`</text>`)
//line forthebadge/for-the-badge.qtpl:24
	}
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`<text transform="scale(.1)" x="`)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().F(messageX)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`" y="175" textLength="`)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().F(messageTextLength)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`" fill="#333" font-weight="bold">`)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.E().S(message)
//line forthebadge/for-the-badge.qtpl:24
	qw422016.N().S(`</text></g></svg>`)
//line forthebadge/for-the-badge.qtpl:24
}

//line forthebadge/for-the-badge.qtpl:24
func WriteForTheBadgeMin(qq422016 qtio422016.Writer, label string, message string, hasLabel bool, svgWidth float64, labelX float64, labelTextLength float64, messageX float64, messageTextLength float64, labelRectWidth float64, messageRectX float64, messageRectWidth float64, color string) {
//line forthebadge/for-the-badge.qtpl:24
	qw422016 := qt422016.AcquireWriter(qq422016)
//line forthebadge/for-the-badge.qtpl:24
	StreamForTheBadgeMin(qw422016, label, message, hasLabel, svgWidth, labelX, labelTextLength, messageX, messageTextLength, labelRectWidth, messageRectX, messageRectWidth, color)
//line forthebadge/for-the-badge.qtpl:24
	qt422016.ReleaseWriter(qw422016)
//line forthebadge/for-the-badge.qtpl:24
}

//line forthebadge/for-the-badge.qtpl:24
func ForTheBadgeMin(label string, message string, hasLabel bool, svgWidth float64, labelX float64, labelTextLength float64, messageX float64, messageTextLength float64, labelRectWidth float64, messageRectX float64, messageRectWidth float64, color string) string {
//line forthebadge/for-the-badge.qtpl:24
	qb422016 := qt422016.AcquireByteBuffer()
//line forthebadge/for-the-badge.qtpl:24
	WriteForTheBadgeMin(qb422016, label, message, hasLabel, svgWidth, labelX, labelTextLength, messageX, messageTextLength, labelRectWidth, messageRectX, messageRectWidth, color)
//line forthebadge/for-the-badge.qtpl:24
	qs422016 := string(qb422016.B)
//line forthebadge/for-the-badge.qtpl:24
	qt422016.ReleaseByteBuffer(qb422016)
//line forthebadge/for-the-badge.qtpl:24
	return qs422016
//line forthebadge/for-the-badge.qtpl:24
}
